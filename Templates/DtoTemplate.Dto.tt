<# 
//------------------------------------------------------------------------
// Entity Framework T4 Template
//
// To use: Copy into your solution using the same name as your edmx file
//         except with .tt for the extension.
//
// Written by: Danny Simmons
// Modified by: Tony Sneed to generate POCO entities
//-------------------------------------------------------------------------

var version = "0.1";

#><#@ template language="C#v3.5" debug="true" hostspecific="true"#>
<#@ output extension = ".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<# 
var Edm = GetEdmItemCollection(Host.TemplateFile.Replace(".Dto.tt",".edmx")); 
var Code = new CSharpCodeLanguage();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from the EF-PCOC T4 template v<#=version#>.
//     Generation date: <#=DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections.Generic;

<#	
	// TODO: consider looping through all the namespaces in the edm item collection instead
	if(Edm.NamespaceName != null)
	{#>
namespace <#=Edm.NamespaceName#>.DTO
{
<#		
	}
#>	
	#region Entities
	
<#
	foreach(EntityType entity in Edm.AllEntities.OrderBy(e => e.FullName))
	{
		foreach(EntityType subType in Edm.AllEntities.Where(b => b.BaseType == entity))
		{
#>	[KnownType(typeof(<#=subType.FullName#>))]
<#	
		}
#>	
	public <#=entity.Abstract ? "abstract " : "" #>partial class <#=entity.Name#> : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
<#
		//
		// Properties
		//
		
#>		#region Scalar Properties

<#		
		foreach(EdmProperty property in entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is PrimitiveType))
		{
	        bool isKeyProperty = ((EntityType)property.DeclaringType).KeyMembers.Contains(property);
	        string propertyName = Code.FormatIdentifier(property.Name);
	        string propertyType = Code.Format(property.TypeUsage);
		    string fieldName = Code.FormatField(property.Name);
	        string propertyIsNullable = property.Nullable.ToString().ToLower();   
#>
		partial void On<#=property.Name#>Changing(<#=propertyType#> value);
		partial void On<#=property.Name#>Changed();

		private <#=propertyType#> <#=fieldName#>;
		public <#=propertyType#> <#=property.Name#>
		{
			get
			{
				return this.<#=fieldName#>;
			}
			set
			{
				this.On<#=property.Name#>Changing(value);
				this.SendPropertyChanging();
				this.<#=fieldName#> = value;
				this.SendPropertyChanged("<#=property.Name#>");
				this.On<#=property.Name#>Changed();
			}
		}
		
<#
		}
#>		#endregion

<#
		//
		// Navigation Properties
		//
		
#>
		#region Navigation Properties
<#
		foreach(NavigationProperty property in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
		{
			string elementType = GetEntityType(property.ToEndMember).Name;
			string relationshipName = property.ToEndMember.DeclaringType.FullName;
			string targetRoleName = property.ToEndMember.Name;
			string fieldName = Code.FormatField(property.Name);
#>	
<#
	        if(property.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
	        {
#>		private ICollection<<#=elementType#>> <#=fieldName#>;
		public ICollection<<#=elementType#>> <#=property.Name#>
		{
			get { return this.<#=fieldName#>; }
			set { this.<#=fieldName#> = value; }
		}
<#
	       }
	       else
	       {
#>
		private <#=GetEntityType(property.ToEndMember).Name#> <#=fieldName#>;
		public <#=GetEntityType(property.ToEndMember).Name#> <#=property.Name#>
		{
			get { return this.<#=fieldName#>; }
			set { this.<#=fieldName#> = value; }
		}
<#
			}
		}
#>

		#endregion
		
	}
	
<#
	}
#>
	#endregion
	
<#
	if(Edm.NamespaceName != null)
	{
	#>
}
	<#
	}
#>


<#+
////////
//////// UTILITY METHODS - do not modify anything below this point
////////

//
// Code for building up a convenient item collection for the CSDL from the EDMX
//

private ItemCollectionWrapper<EdmItemCollection> GetEdmItemCollection(string edmxFile)
{
    EdmItemCollection edmItems = new EdmItemCollection(new XmlReader[] { GetCSDLReader(edmxFile) });
    return new ItemCollectionWrapper<EdmItemCollection>(edmItems);
}

private XmlReader GetCSDLReader(string edmxFile)
{
    XNamespace edmxns = "http://schemas.microsoft.com/ado/2007/06/edmx";
    XNamespace csdlns = "http://schemas.microsoft.com/ado/2006/04/edm";

    XDocument edmxDoc = XDocument.Load(edmxFile);
    XElement edmxNode = edmxDoc.Element(edmxns + "Edmx");
    XElement runtimeNode = edmxNode.Element(edmxns + "Runtime");
    XElement conceptualModelsNode = runtimeNode.Element(edmxns + "ConceptualModels");
    XElement csdlContent = conceptualModelsNode.Element(csdlns + "Schema");
    return csdlContent.CreateReader();
}

public class ItemCollectionWrapper<T>  where T : ItemCollection
{
    T _collection;
    public ItemCollectionWrapper(T collection)
    {
        _collection = collection;
    }

    public T Collection { get{ return _collection; }}

    public IEnumerable<EntityContainer> AllEntityContainers
    {
        get
        {
            return _collection.GetItems<EntityContainer>();
        }
    }

    public IEnumerable<EntityType> AllEntities
    {
        get
        {
            return _collection.GetItems<EntityType>();
        }
    }

    public IEnumerable<AssociationType> AllAssociations
    {
        get
        {
            return _collection.GetItems<AssociationType>();
        }
    }
    
    public string NamespaceName
	{
		get
		{
			EntityType type = this.AllEntities.FirstOrDefault(e => e.NamespaceName != null);
			if (type != null && type.NamespaceName != null)
			{
				return type.NamespaceName;
			}
			return null;
		}
	}
}

//
// Convenience methods
//

public EntityType GetEntityType(RelationshipEndMember end)
{
    return (EntityType)((RefType)end.TypeUsage.EdmType).ElementType;
}

public string GetEnumValueString(object enumValue)
{
    Type type = enumValue.GetType();
    Debug.Assert(type.IsEnum, "this type is not an enum");

    return type.FullName + "." + enumValue.ToString();
}

bool IncludePropertyInFactoryMethod(EdmProperty property)
{
	if (property.Nullable)
    {
		return false;
    }
    if (property.DefaultValue != null)
    {
        return false;
    }

    return true;
}

string GetSetValidValueParameters(PrimitiveType type, bool nullable)
{
	string parameters = "value";
	if(type.ClrEquivalentType.IsClass)
		parameters += ", " + nullable.ToString().ToLower();
		
	return parameters;
}

//
// language specific code generation classes
//
	
abstract class CodeLanguage 
{
	protected CodeDomProvider CodeDomProvider { get; set; }
	
	protected CodeLanguage(CodeDomProvider codeDomProvider) 
	{
		CodeDomProvider = codeDomProvider;
	}
	
	public String Format(Type type) 
	{
		return ShortenTypeRef(CodeDomProvider.GetTypeOutput(new CodeTypeReference(type)));
	}
	
	public String Format(TypeUsage typeUsage)
	{
		if(typeUsage.EdmType is ComplexType)
		{
			return typeUsage.EdmType.Name;
		}
		else if (typeUsage.EdmType is PrimitiveType)
		{
			Type clrType = ((PrimitiveType)typeUsage.EdmType).ClrEquivalentType;
			string elementType = Format(clrType);
			if(clrType.IsValueType && IsNullable(typeUsage))
			{
				return elementType + "?";
			}
			return elementType;
		}
		
		return "UnknownType";
	}
	
	public String FormatIdentifier(string identifier)
	{
		return CodeDomProvider.CreateEscapedIdentifier(identifier);
	}
	
	public string FormatParameter(string identifier)
	{
		return FormatIdentifier(CamelCase(identifier));
	}
	
	public string FormatField(string identifier)
	{
		return FormatIdentifier("_" + identifier);
	}
	
	protected string CamelCase(string identifier)
	{
		if (string.IsNullOrEmpty(identifier))
			return identifier;

		if (identifier.Length == 1)
			return identifier[0].ToString(System.Globalization.CultureInfo.InvariantCulture).ToLowerInvariant();

		return identifier[0].ToString(System.Globalization.CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
	}
	
	protected virtual String ShortenTypeRef(String typeRef) 
	{
		return (typeRef.LastIndexOf('.') != 6) ? typeRef.Replace("System.Data.Linq.","") : typeRef.Replace("System.","");
	}
	
	protected String Format(CodeTypeReference codeTypeRef) 
	{
		return ShortenTypeRef(CodeDomProvider.GetTypeOutput(codeTypeRef));
	}
	
	protected bool IsNullable(TypeUsage typeUsage)
	{
		return (bool)typeUsage.Facets["Nullable"].Value;
	}
}

class CSharpCodeLanguage : CodeLanguage 
{
	public CSharpCodeLanguage() : base(new Microsoft.CSharp.CSharpCodeProvider()) { }

	protected override String ShortenTypeRef(String typeRef) 
	{
		if (typeRef.StartsWith("System.Nullable<"))
			typeRef = typeRef.Replace("System.Nullable<","").Replace(">","?");
		return base.ShortenTypeRef(typeRef);
	}
}

class VBCodeLanguage : CodeLanguage 
{
	public VBCodeLanguage() : base(new Microsoft.VisualBasic.VBCodeProvider()) { }
}
#>